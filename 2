def func1(arg1, arg2):
    var3 = func4()
    var11 = var6(arg1, arg2)
    var14 = func8(arg2, var11)
    var17 = func9(arg2, var11)
    var18 = arg2 ^ ((var11 - 762) + var17)
    var19 = var14 ^ -851
    var20 = var3 + arg1
    var21 = var17 ^ var18
    var22 = arg2 & arg2 & (var18 | 246)
    var23 = ((var17 ^ var17) ^ -530) & var21
    var24 = arg2 + var3 - arg1 | var14
    var25 = (arg1 + var17 + var24) ^ arg1
    var26 = arg2 | -721 ^ var18
    var27 = var22 + var23 & var25 - var25
    var28 = var11 + var24 ^ var23 ^ var11
    var29 = (61 | var14 - var23) & var28
    var30 = ((var17 - var23) | var17) - var21
    result = var30 & arg1
    return result
def func9(arg15, arg16):
    result = 185 ^ -178478880 & ((((arg16 ^ (arg15 ^ -49)) & (484 - arg15)) | -810) | arg15)
    return result
def func8(arg12, arg13):
    result = arg12 - arg12
    return result
def func7(arg7, arg8):
    var9 = (-877 & -547621586 + -686 - -274254201 + arg8) | 903
    var10 = -550 - (arg8 + arg7 | -1672008814)
    result = 1880294876 | var9 ^ (-1925036317 ^ var10) - 164577361 - ((arg7 - -252 | var10 | (arg7 - 901645703)) | (arg7 - arg7))
    return result
def func6():
    closure = [2]
    def func5(arg4, arg5):
        closure[0] += func7(arg4, arg5)
        return closure[0]
    func = func5
    return func
var6 = func6()
def func4():
    func2()
    result = len(((-10 + 3) ^ (3 + (i | (i ^ 3 - 8 + (-2 & -2) | i) + i)) | -5 for i in range(23)))
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : 3
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 31'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var3 = func4()
    var11 = var6(arg1, arg2)
    var14 = func8(arg2, var11)
    var17 = func9(arg2, var11)
    var18 = arg2 ^ ((var11 - 762) + var17)
    var19 = var14 ^ -851
    var20 = var3 + arg1
    var21 = var17 ^ var18
    var22 = arg2 & arg2 & (var18 | 246)
    var23 = ((var17 ^ var17) ^ -530) & var21
    var24 = arg2 + var3 - arg1 | var14
    var25 = (arg1 + var17 + var24) ^ arg1
    var26 = arg2 | -721 ^ var18
    var27 = var22 + var23 & var25 - var25
    var28 = var11 + var24 ^ var23 ^ var11
    var29 = (61 | var14 - var23) & var28
    var30 = ((var17 - var23) | var17) - var21
    result = var30 & arg1
    return result
def func9(arg15, arg16):
    result = 185 ^ -178478880 & ((((arg16 ^ (arg15 ^ -49)) & (484 - arg15)) | -810) | arg15)
    return result
def func8(arg12, arg13):
    result = arg12 - arg12
    return result
def func7(arg7, arg8):
    var9 = (-877 & -547621586 + -686 - -274254201 + arg8) | 903
    var10 = -550 - (arg8 + arg7 | -1672008814)
    result = 1880294876 | var9 ^ (-1925036317 ^ var10) - 164577361 - ((arg7 - -252 | var10 | (arg7 - 901645703)) | (arg7 - arg7))
    return result
def func6():
    closure = [2]
    def func5(arg4, arg5):
        closure[0] += func7(arg4, arg5)
        return closure[0]
    func = func5
    return func
var6 = func6()
def func4():
    func2()
    result = len(((-10 + 3) ^ (3 + (i | (i ^ 3 - 8 + (-2 & -2) | i) + i)) | -5 for i in range(23)))
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : 3
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 31'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var3 = func4()
    var11 = var6(arg1, arg2)
    var14 = func8(arg2, var11)
    var17 = func9(arg2, var11)
    var18 = arg2 ^ ((var11 - 762) + var17)
    var19 = var14 ^ -851
    var20 = var3 + arg1
    var21 = var17 ^ var18
    var22 = arg2 & arg2 & (var18 | 246)
    var23 = ((var17 ^ var17) ^ -530) & var21
    var24 = arg2 + var3 - arg1 | var14
    var25 = (arg1 + var17 + var24) ^ arg1
    var26 = arg2 | -721 ^ var18
    var27 = var22 + var23 & var25 - var25
    var28 = var11 + var24 ^ var23 ^ var11
    var29 = (61 | var14 - var23) & var28
    var30 = ((var17 - var23) | var17) - var21
    result = var30 & arg1
    return result
def func9(arg15, arg16):
    result = 185 ^ -178478880 & ((((arg16 ^ (arg15 ^ -49)) & (484 - arg15)) | -810) | arg15)
    return result
def func8(arg12, arg13):
    result = arg12 - arg12
    return result
def func7(arg7, arg8):
    var9 = (-877 & -547621586 + -686 - -274254201 + arg8) | 903
    var10 = -550 - (arg8 + arg7 | -1672008814)
    result = 1880294876 | var9 ^ (-1925036317 ^ var10) - 164577361 - ((arg7 - -252 | var10 | (arg7 - 901645703)) | (arg7 - arg7))
    return result
def func6():
    closure = [2]
    def func5(arg4, arg5):
        closure[0] += func7(arg4, arg5)
        return closure[0]
    func = func5
    return func
var6 = func6()
def func4():
    func2()
    result = len(((-10 + 3) ^ (3 + (i | (i ^ 3 - 8 + (-2 & -2) | i) + i)) | -5 for i in range(23)))
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : 3
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 31'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var3 = func4()
    var11 = var6(arg1, arg2)
    var14 = func8(arg2, var11)
    var17 = func9(arg2, var11)
    var18 = arg2 ^ ((var11 - 762) + var17)
    var19 = var14 ^ -851
    var20 = var3 + arg1
    var21 = var17 ^ var18
    var22 = arg2 & arg2 & (var18 | 246)
    var23 = ((var17 ^ var17) ^ -530) & var21
    var24 = arg2 + var3 - arg1 | var14
    var25 = (arg1 + var17 + var24) ^ arg1
    var26 = arg2 | -721 ^ var18
    var27 = var22 + var23 & var25 - var25
    var28 = var11 + var24 ^ var23 ^ var11
    var29 = (61 | var14 - var23) & var28
    var30 = ((var17 - var23) | var17) - var21
    result = var30 & arg1
    return result
def func9(arg15, arg16):
    result = 185 ^ -178478880 & ((((arg16 ^ (arg15 ^ -49)) & (484 - arg15)) | -810) | arg15)
    return result
def func8(arg12, arg13):
    result = arg12 - arg12
    return result
def func7(arg7, arg8):
    var9 = (-877 & -547621586 + -686 - -274254201 + arg8) | 903
    var10 = -550 - (arg8 + arg7 | -1672008814)
    result = 1880294876 | var9 ^ (-1925036317 ^ var10) - 164577361 - ((arg7 - -252 | var10 | (arg7 - 901645703)) | (arg7 - arg7))
    return result
def func6():
    closure = [2]
    def func5(arg4, arg5):
        closure[0] += func7(arg4, arg5)
        return closure[0]
    func = func5
    return func
var6 = func6()
def func4():
    func2()
    result = len(((-10 + 3) ^ (3 + (i | (i ^ 3 - 8 + (-2 & -2) | i) + i)) | -5 for i in range(23)))
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : 3
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 31'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var3 = func4()
    var11 = var6(arg1, arg2)
    var14 = func8(arg2, var11)
    var17 = func9(arg2, var11)
    var18 = arg2 ^ ((var11 - 762) + var17)
    var19 = var14 ^ -851
    var20 = var3 + arg1
    var21 = var17 ^ var18
    var22 = arg2 & arg2 & (var18 | 246)
    var23 = ((var17 ^ var17) ^ -530) & var21
    var24 = arg2 + var3 - arg1 | var14
    var25 = (arg1 + var17 + var24) ^ arg1
    var26 = arg2 | -721 ^ var18
    var27 = var22 + var23 & var25 - var25
    var28 = var11 + var24 ^ var23 ^ var11
    var29 = (61 | var14 - var23) & var28
    var30 = ((var17 - var23) | var17) - var21
    result = var30 & arg1
    return result
def func9(arg15, arg16):
    result = 185 ^ -178478880 & ((((arg16 ^ (arg15 ^ -49)) & (484 - arg15)) | -810) | arg15)
    return result
def func8(arg12, arg13):
    result = arg12 - arg12
    return result
def func7(arg7, arg8):
    var9 = (-877 & -547621586 + -686 - -274254201 + arg8) | 903
    var10 = -550 - (arg8 + arg7 | -1672008814)
    result = 1880294876 | var9 ^ (-1925036317 ^ var10) - 164577361 - ((arg7 - -252 | var10 | (arg7 - 901645703)) | (arg7 - arg7))
    return result
def func6():
    closure = [2]
    def func5(arg4, arg5):
        closure[0] += func7(arg4, arg5)
        return closure[0]
    func = func5
    return func
var6 = func6()
def func4():
    func2()
    result = len(((-10 + 3) ^ (3 + (i | (i ^ 3 - 8 + (-2 & -2) | i) + i)) | -5 for i in range(23)))
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : 3
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 31'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
